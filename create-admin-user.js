#!/usr/bin/env node

/**
 * üë§ Script para criar o primeiro usu√°rio administrador
 * 
 * Este script cria um usu√°rio recepcionista padr√£o para primeiro acesso.
 * Use quando o sistema estiver vazio e precisar do primeiro acesso.
 * 
 * Uso: node create-admin-user.js
 */

require('dotenv').config({ path: '.env.local' });
// Fallback para .env se .env.local n√£o existir
if (!process.env.MONGODB_URI) {
  require('dotenv').config({ path: '.env' });
}
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// Verificar se MONGODB_URI est√° configurado
const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  console.error('‚ùå MONGODB_URI n√£o encontrado no .env.local');
  console.log('üìã Crie o arquivo .env.local com:');
  console.log('MONGODB_URI=mongodb://localhost:27017/recanto-verde');
  process.exit(1);
}

// Schema do usu√°rio (similar ao modelo User)
const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  },
  role: {
    type: String,
    enum: ['garcom', 'recepcionista'],
    required: true
  },
  phone: String,
  status: {
    type: String,
    enum: ['ativo', 'inativo'],
    default: 'ativo'
  }
}, { 
  timestamps: true 
});

const User = mongoose.model('User', userSchema);

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error);
    process.exit(1);
  }
}

async function createAdminUser() {
  try {
    // Dados do usu√°rio administrador padr√£o
    const adminData = {
      username: 'admin',
      email: 'admin@recantoverde.com',
      password: 'admin123',
      role: 'recepcionista',
      phone: '(11) 99999-9999',
      status: 'ativo'
    };

    // Verificar se j√° existe um usu√°rio admin
    const existingAdmin = await User.findOne({ 
      $or: [
        { username: adminData.username },
        { email: adminData.email },
        { role: 'recepcionista' }
      ]
    });

    if (existingAdmin) {
      console.log('‚ÑπÔ∏è J√° existe um usu√°rio administrador no sistema:');
      console.log(`   üë§ Username: ${existingAdmin.username}`);
      console.log(`   üìß Email: ${existingAdmin.email}`);
      console.log(`   üîë Role: ${existingAdmin.role}`);
      console.log('');
      console.log('üí° Se precisar resetar, use: npm run db:reset');
      return;
    }

    console.log('üë§ Criando usu√°rio administrador...');

    // Criar usu√°rio (o hash da senha ser√° feito automaticamente pelo middleware do modelo)
    const newAdmin = new User({
      ...adminData
    });

    await newAdmin.save();

    console.log('');
    console.log('üéâ Usu√°rio administrador criado com sucesso!');
    console.log('');
    console.log('üìã Credenciais de acesso:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ  üë§ Username: admin                 ‚îÇ');
    console.log('‚îÇ  üìß Email: admin@recantoverde.com   ‚îÇ');
    console.log('‚îÇ  üîë Senha: admin123                ‚îÇ');
    console.log('‚îÇ  üé≠ Role: recepcionista             ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    console.log('');
    console.log('üöÄ Acesse o sistema em:');
    console.log('   üåê http://localhost:3000/auth/login?role=recepcionista');
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!');
    console.log('   V√° em: Admin ‚Üí Configura√ß√µes ‚Üí Perfil');

  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio administrador:', error);
    
    if (error.code === 11000) {
      console.log('');
      console.log('‚ö†Ô∏è  Erro de duplica√ß√£o detectado.');
      console.log('üí° Parece que j√° existe um usu√°rio com esses dados.');
      console.log('   Use "npm run db:reset" para limpar o banco se necess√°rio.');
    }
  }
}

async function main() {
  console.log('üöÄ Iniciando cria√ß√£o do usu√°rio administrador...');
  console.log(`üîó Conectando em: ${MONGODB_URI.replace(/\/\/.*@/, '//***:***@')}`);
  console.log('');

  await connectDB();
  await createAdminUser();
  
  await mongoose.disconnect();
  console.log('');
  console.log('‚úÖ Desconectado do banco de dados');
  console.log('üéØ Processo conclu√≠do!');
}

// Fun√ß√£o para mostrar ajuda
function showHelp() {
  console.log('');
  console.log('üë§ Script de Cria√ß√£o do Usu√°rio Administrador');
  console.log('');
  console.log('Este script cria o primeiro usu√°rio recepcionista para acessar o sistema.');
  console.log('');
  console.log('üìã Uso:');
  console.log('   node create-admin-user.js        - Criar usu√°rio admin');
  console.log('   node create-admin-user.js --help - Mostrar esta ajuda');
  console.log('');
  console.log('üìÅ Arquivos necess√°rios:');
  console.log('   .env.local - Deve conter MONGODB_URI');
  console.log('');
  console.log('üîß Scripts relacionados:');
  console.log('   npm run db:reset - Limpar banco de dados');
  console.log('   npm run dev      - Iniciar servidor');
  console.log('');
}

// Verificar argumentos da linha de comando
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showHelp();
  process.exit(0);
}

// Executar script principal
main().catch(error => {
  console.error('‚ùå Erro na execu√ß√£o:', error);
  process.exit(1);
}); 